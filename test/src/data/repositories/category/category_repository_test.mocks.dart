// Mocks generated by Mockito 5.4.4 from annotations
// in ToDo/test/src/data/repositories/category/category_repository_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:mockito/mockito.dart' as _i1;
import 'package:ToDo/src/data/datasource/category/category_data_provider.dart'
    as _i3;
import 'package:ToDo/src/domain/models/category/category_item.dart' as _i2;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeCategoryItem_0 extends _i1.SmartFake implements _i2.CategoryItem {
  _FakeCategoryItem_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [CategoryDataProvider].
///
/// See the documentation for Mockito's code generation for more information.
class MockCategoryDataProvider extends _i1.Mock
    implements _i3.CategoryDataProvider {
  MockCategoryDataProvider() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.CategoryItem?> getCategory(String? categoryID) =>
      (super.noSuchMethod(
        Invocation.method(
          #getCategory,
          [categoryID],
        ),
        returnValue: _i4.Future<_i2.CategoryItem?>.value(),
      ) as _i4.Future<_i2.CategoryItem?>);

  @override
  _i4.Future<List<_i2.CategoryItem>> getCategories() => (super.noSuchMethod(
        Invocation.method(
          #getCategories,
          [],
        ),
        returnValue:
            _i4.Future<List<_i2.CategoryItem>>.value(<_i2.CategoryItem>[]),
      ) as _i4.Future<List<_i2.CategoryItem>>);

  @override
  _i4.Future<_i2.CategoryItem> createOrUpdateCategory(
          _i2.CategoryItem? categoryItem) =>
      (super.noSuchMethod(
        Invocation.method(
          #createOrUpdateCategory,
          [categoryItem],
        ),
        returnValue: _i4.Future<_i2.CategoryItem>.value(_FakeCategoryItem_0(
          this,
          Invocation.method(
            #createOrUpdateCategory,
            [categoryItem],
          ),
        )),
      ) as _i4.Future<_i2.CategoryItem>);

  @override
  _i4.Future<bool> deleteCategory(String? categoryID) => (super.noSuchMethod(
        Invocation.method(
          #deleteCategory,
          [categoryID],
        ),
        returnValue: _i4.Future<bool>.value(false),
      ) as _i4.Future<bool>);

  @override
  _i4.Future<void> clear() => (super.noSuchMethod(
        Invocation.method(
          #clear,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);
}
