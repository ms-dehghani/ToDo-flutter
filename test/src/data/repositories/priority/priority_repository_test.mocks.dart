// Mocks generated by Mockito 5.4.4 from annotations
// in ToDo/test/src/data/repositories/priority/priority_repository_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:mockito/mockito.dart' as _i1;
import 'package:ToDo/src/data/datasource/priority/priority_data_provider.dart'
    as _i3;
import 'package:ToDo/src/domain/models/priority/priority_item.dart' as _i2;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakePriorityItem_0 extends _i1.SmartFake implements _i2.PriorityItem {
  _FakePriorityItem_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [PriorityDataProvider].
///
/// See the documentation for Mockito's code generation for more information.
class MockPriorityDataProvider extends _i1.Mock
    implements _i3.PriorityDataProvider {
  MockPriorityDataProvider() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.PriorityItem?> getPriority(String? priorityID) =>
      (super.noSuchMethod(
        Invocation.method(
          #getPriority,
          [priorityID],
        ),
        returnValue: _i4.Future<_i2.PriorityItem?>.value(),
      ) as _i4.Future<_i2.PriorityItem?>);

  @override
  _i4.Future<List<_i2.PriorityItem>> getPriorities() => (super.noSuchMethod(
        Invocation.method(
          #getPriorities,
          [],
        ),
        returnValue:
            _i4.Future<List<_i2.PriorityItem>>.value(<_i2.PriorityItem>[]),
      ) as _i4.Future<List<_i2.PriorityItem>>);

  @override
  _i4.Future<_i2.PriorityItem> createOrUpdatePriority(
          _i2.PriorityItem? priorityItem) =>
      (super.noSuchMethod(
        Invocation.method(
          #createOrUpdatePriority,
          [priorityItem],
        ),
        returnValue: _i4.Future<_i2.PriorityItem>.value(_FakePriorityItem_0(
          this,
          Invocation.method(
            #createOrUpdatePriority,
            [priorityItem],
          ),
        )),
      ) as _i4.Future<_i2.PriorityItem>);

  @override
  _i4.Future<bool> deletePriority(String? priorityID) => (super.noSuchMethod(
        Invocation.method(
          #deletePriority,
          [priorityID],
        ),
        returnValue: _i4.Future<bool>.value(false),
      ) as _i4.Future<bool>);

  @override
  _i4.Future<void> clear() => (super.noSuchMethod(
        Invocation.method(
          #clear,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);
}
