// Mocks generated by Mockito 5.4.4 from annotations
// in ToDo/test/src/app/logic/task/get/bloc/task_get_bloc_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;

import 'package:mockito/mockito.dart' as _i1;
import 'package:ToDo/src/domain/models/task/task_item.dart' as _i5;
import 'package:ToDo/src/domain/usecase/task/existence/task_check_existence_usecase.dart'
    as _i2;
import 'package:ToDo/src/domain/usecase/task/retrieve/daylist/task_retrieve_day_list_items_usecase.dart'
    as _i4;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [TaskCheckExistenceUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockTaskCheckExistenceUseCase extends _i1.Mock
    implements _i2.TaskCheckExistenceUseCase {
  MockTaskCheckExistenceUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<Map<int, bool>> invoke(
    int? startDate,
    int? endDate,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #invoke,
          [
            startDate,
            endDate,
          ],
        ),
        returnValue: _i3.Future<Map<int, bool>>.value(<int, bool>{}),
      ) as _i3.Future<Map<int, bool>>);
}

/// A class which mocks [TaskRetrieveDayListItemsUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockTaskRetrieveDayListItemsUseCase extends _i1.Mock
    implements _i4.TaskRetrieveDayListItemsUseCase {
  MockTaskRetrieveDayListItemsUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<List<_i5.TaskItem>> invoke(int? timestamp) => (super.noSuchMethod(
        Invocation.method(
          #invoke,
          [timestamp],
        ),
        returnValue: _i3.Future<List<_i5.TaskItem>>.value(<_i5.TaskItem>[]),
      ) as _i3.Future<List<_i5.TaskItem>>);
}
